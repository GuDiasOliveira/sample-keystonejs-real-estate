extends ../layouts/default

block intro
	.container
		h1 My properties
	
block content
	.container.properties
		nav.sidebar
			form(action="/", method="get", id="form-search")
				h3 Filter properties
				.form-group
					label(for="name") Name
					input.form-control(type="text", name="name", id="name", value=urlParams.name)
				.form-group
					label(for="min-price") Price
					.row
						.col-md-6
							input.form-control(type="number", name="minPrice", id="min-price", value=urlParams.minPrice, min='0', step='0.01', placeholder='Min')
						.col-md-6
							input.form-control(type="number", name="maxPrice", id="max-price", value=urlParams.maxPrice, min='0', step='0.01', placeholder='Max')
				.form-group
					label(for="type") Type
					select.form-control(name="type", id="type")
						option(value='', selected=!urlParams.type) &lt;All types&gt;
						each propType in propertyTypes
							option(value=propType.value, selected=(urlParams.type == propType.value))= propType.label
				.form-group
					label(for="min-area") Area
					.row
						.col-md-6
							input.form-control(type="number", name="minArea", id="min-area", value=urlParams.minArea, min='0', step='1', placeholder='Min')
						.col-md-6
							input.form-control(type="number", name="maxArea", id="max-area", value=urlParams.maxArea, min='0', step='1', placeholder='Max')
					.row
						.col-md-6
							label.radio-inline
								input(type="radio", name="areaType", id="area-type-useful", value="useful", checked=(!urlParams.areaType || urlParams.areaType == 'useful'))
								| Useful area
						.col-md-6
							label.radio-inline
								input(type="radio", name="areaType", id="area-type-total", value="total", checked=(urlParams.areaType == 'total'))
								| Total area
				.form-group
					label(for="min-rooms") Rooms
					select.form-control(name="minRooms", id="min-rooms")
						option(value='', selected=!urlParams.minRooms) &lt;any&gt;
						- for (let i = 1; i <= 5; i++)
							option(value=i, selected=(urlParams.minRooms == i)) #{i}+
				h3 Order by
				.form-group
					select.form-control(name="sort", id="sort")
						option(value='', selected=!urlParams.sort) &lt;select&gt;
						each sortOption in Object.keys(sortOptions)
							option(value=sortOption, selected=(urlParams.sort == sortOption))= sortOptions[sortOption]
				.form-group
					button.btn.btn-default(type='submit') Search
		.properties-list
			each property in properties
				.property-item.col-sm-4.col-md-4
					a(href=`/property/${property._id}`)
						h2.property-name= property.name || '<property>'
					a(href=`/property/${property._id}`)
						.property-thumb-image.thumbnail
							if property.thumbPhoto.exists
								img(src=property._.thumbPhoto.fit(300, 200)).img-rounded
							else
								.no-thumb-image
									p No thumbnail image!
					.property-id.text-muted Ref. #{property._id}
					.property-price R$ #{property.price}
					.property-type= propertyTypes[property.propType].label
					.row.property-areas-rooms
						.col-md-4
							p <strong>#{property.totalArea} m²</strong><br />total area
						.col-md-4
							p <strong>#{property.usefulArea} m²</strong><br />useful area
						.col-md-4
							p <strong>#{property.rooms}</strong><br />#{property.rooms != 1 ? 'rooms' : 'room'}
			else
				h2.properties-empty No properties
		-
			let currentPage = +urlParams.page || 1;
			let minPage = Math.max(currentPage - parseInt(maxPagesListing / 2) , 1);
			let maxPagesCount = Math.max(1, Math.ceil(propertiesCount / perPage));
			let maxPage = Math.min(minPage + maxPagesListing - 1, maxPagesCount);
			let pageLinkParams = Object.assign({}, urlParams);
		if maxPagesCount > 1
			ul.pagination
				//- Start page
				if currentPage > 2
					- pageLinkParams.page = 1;
					li(): a(href=buildUrl('/', { queryParams: pageLinkParams })) &lt;&lt;&lt;
				//- Previous page
				if currentPage > 1
					- pageLinkParams.page = currentPage - 1;
					li(): a(href=buildUrl('/', { queryParams: pageLinkParams })) &lt;&lt;
				//- Pages
				- for (let p = minPage; p <= maxPage; p++)
					- pageLinkParams.page = p;
					li(class=(p == currentPage && 'active')): a(href=buildUrl('/', { queryParams: pageLinkParams }))= p
				//- Next page
				if currentPage < maxPagesCount
					- pageLinkParams.page = currentPage + 1;
					li(): a(href=buildUrl('/', { queryParams: pageLinkParams })) &gt;&gt;
				//- End page
				if currentPage < (maxPagesCount - 1)
					- pageLinkParams.page = maxPagesCount;
					li(): a(href=buildUrl('/', { queryParams: pageLinkParams })) &gt;&gt;&gt;

block js
	script.
		$('form#form-search').submit(function() {
			// Unset url params whose fields are blank
			$(this).find(":input").filter(function() {
				return !this.value;
			}).attr("disabled", true);
			// Unset area type if area search param is blank
			if (!$(this).find('input[name="minArea"]').val() && !$(this).find('input[name="maxArea"]').val()) {
				$(this).find('input[name="areaType"]').attr('disabled', true);
			}
			// Submit
			return true;
		});
